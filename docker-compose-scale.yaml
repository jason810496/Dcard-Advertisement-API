version: '1.0'

services:
  db:
    image: postgres:15.1
    ports:
      - 5432:5432
    env_file:
      - .env/dev/db.env
    restart: always
    volumes:
      - ./stateful_volumes/dev/postgresql:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "your_postgres_user", "-d", "advertisement"]
      interval: 2s
      timeout: 5s
      retries: 3
    labels:
        - "traefik.enable=false"

  redis:
    image: bitnami/redis:latest
    ports:
      - 6379:6379
    restart: always
    volumes:
      - ./stateful_volumes/dev/redis:/bitnami/redis/data
    env_file:
      - .env/dev/redis.env
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 2s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=false"

  generator:
    image: jasonbigcow/dcard-advertisement-api-generator:v2
    # build: 
    #   context: .
    #   dockerfile: ./deployments/dev/generator/Dockerfile
    # restart: always
    volumes:
      - .env:/app/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["./generator","-config","test"]

  scheduler:
    image: jasonbigcow/dcard-advertisement-api-scheduler:v2
    # build: 
    #   context: .
    #   dockerfile: ./deployments/dev/scheduler/Dockerfile
    restart: always
    volumes:
      - .env:/app/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["./scheduler","-config","test"]

  api:
    build: 
      context: .
      dockerfile: ./deployments/dev/api/Dockerfile
    # ports:
    #   - 8000:8000
    expose:
      - "8000"
    restart: always
    volumes:
      - .env:/app/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["./api","-config","test"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`localhost`)"
      - "traefik.http.routers.api.entrypoints=api"
      - "traefik.http.services.api.loadbalancer.server.port=8000"



  k6:
    image: grafana/k6
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_started
    env_file:
      - .env/dev/k6.env

  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.11
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.api.address=:8000"
    ports:
      # The HTTP port
      - "8000:8000"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  default: 
    name: dcard_advertisement_api